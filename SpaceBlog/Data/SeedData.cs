using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using SpaceBlog.Models;

namespace SpaceBlog.Data
{
    public static class SeedData
    {
        public static async Task Initialize(IServiceProvider serviceProvider)
        {
            using var context = new ApplicationDbContext(
                serviceProvider.GetRequiredService<DbContextOptions<ApplicationDbContext>>());

            var userManager = serviceProvider.GetRequiredService<UserManager<BlogUser>>();
            var roleManager = serviceProvider.GetRequiredService<RoleManager<Role>>();

        // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        await CreateRolesAsync(roleManager);

        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await CreateAdminUserAsync(userManager);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await CreateTestUsersAsync(userManager);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await FixExistingTestUsersAsync(userManager);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await CreateSampleDataAsync(context, userManager);
        }

        private static async Task CreateRolesAsync(RoleManager<Role> roleManager)
        {
            string[] roleNames = { Role.Names.Administrator, Role.Names.Moderator, Role.Names.Author, Role.Names.User };

            foreach (var roleName in roleNames)
            {
                if (!await roleManager.RoleExistsAsync(roleName))
                {
                    var role = new Role
                    {
                        Name = roleName,
                        Description = GetRoleDescription(roleName),
                        Priority = GetRolePriority(roleName)
                    };
                    await roleManager.CreateAsync(role);
                }
            }
        }

        private static async Task CreateAdminUserAsync(UserManager<BlogUser> userManager)
        {
            var adminEmail = "admin@spaceblog.com";
            var adminUser = await userManager.FindByEmailAsync(adminEmail);

            if (adminUser == null)
            {
                adminUser = new BlogUser
                {
                    UserName = adminEmail,
                    Email = adminEmail,
                    EmailConfirmed = true,
                    FirstName = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    LastName = "1",
                    Bio = "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–ª–æ–≥–∞ SpaceBlog",
                    RegistrationDate = DateTime.UtcNow
                };

                var result = await userManager.CreateAsync(adminUser, "Admin123!");
                if (result.Succeeded)
                {
                    await userManager.AddToRoleAsync(adminUser, Role.Names.Administrator);
                }
            }
        }

        private static async Task CreateTestUsersAsync(UserManager<BlogUser> userManager)
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            var moderatorEmail = "moderator@spaceblog.com";
            var moderatorUser = await userManager.FindByEmailAsync(moderatorEmail);

            if (moderatorUser == null)
            {
                moderatorUser = new BlogUser
                {
                    UserName = moderatorEmail,
                    Email = moderatorEmail,
                    EmailConfirmed = true,
                    FirstName = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                    LastName = "1",
                    Bio = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –±–ª–æ–≥–µ",
                    RegistrationDate = DateTime.UtcNow
                };

                var result = await userManager.CreateAsync(moderatorUser, "Moderator123!");
                if (result.Succeeded)
                {
                    await userManager.AddToRoleAsync(moderatorUser, Role.Names.Moderator);
                    Console.WriteLine($"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {moderatorEmail}");
                }
                else
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                Console.WriteLine($"‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {moderatorEmail}");
            }

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userEmail = "user@spaceblog.com";
            var testUser = await userManager.FindByEmailAsync(userEmail);

            if (testUser == null)
            {
                testUser = new BlogUser
                {
                    UserName = userEmail,
                    Email = userEmail,
                    EmailConfirmed = true,
                    FirstName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    LastName = "1",
                    Bio = "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–æ–≥–∞, —á–∏—Ç–∞—Ç–µ–ª—å —Å—Ç–∞—Ç–µ–π",
                    RegistrationDate = DateTime.UtcNow
                };

                var result = await userManager.CreateAsync(testUser, "User123!");
                if (result.Succeeded)
                {
                    await userManager.AddToRoleAsync(testUser, Role.Names.User);
                    Console.WriteLine($"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {userEmail}");
                }
                else
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                Console.WriteLine($"‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {userEmail}");
            }
        }

        private static async Task FixExistingTestUsersAsync(UserManager<BlogUser> userManager)
        {
            Console.WriteLine("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            var moderatorUser = await userManager.FindByEmailAsync("moderator@spaceblog.com");
            if (moderatorUser != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                var passwordCheck = await userManager.CheckPasswordAsync(moderatorUser, "Moderator123!");
                if (!passwordCheck)
                {
                    Console.WriteLine("üîë –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞...");
                    var token = await userManager.GeneratePasswordResetTokenAsync(moderatorUser);
                    await userManager.ResetPasswordAsync(moderatorUser, token, "Moderator123!");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
                var isInRole = await userManager.IsInRoleAsync(moderatorUser, Role.Names.Moderator);
                if (!isInRole)
                {
                    Console.WriteLine("üëë –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞...");
                    await userManager.AddToRoleAsync(moderatorUser, Role.Names.Moderator);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var testUser = await userManager.FindByEmailAsync("user@spaceblog.com");
            if (testUser != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                var passwordCheck = await userManager.CheckPasswordAsync(testUser, "User123!");
                if (!passwordCheck)
                {
                    Console.WriteLine("üîë –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
                    var token = await userManager.GeneratePasswordResetTokenAsync(testUser);
                    await userManager.ResetPasswordAsync(testUser, token, "User123!");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
                var isInRole = await userManager.IsInRoleAsync(testUser, Role.Names.User);
                if (!isInRole)
                {
                    Console.WriteLine("üë§ –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
                    await userManager.AddToRoleAsync(testUser, Role.Names.User);
                }
            }
        }

        private static async Task CreateSampleDataAsync(ApplicationDbContext context, UserManager<BlogUser> userManager)
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            var authorEmail = "author@spaceblog.com";
            var authorUser = await userManager.FindByEmailAsync(authorEmail);

            if (authorUser == null)
            {
                authorUser = new BlogUser
                {
                    UserName = authorEmail,
                    Email = authorEmail,
                    EmailConfirmed = true,
                    FirstName = "–¢–µ—Å—Ç–æ–≤—ã–π",
                    LastName = "–ê–≤—Ç–æ—Ä",
                    Bio = "–ê–≤—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–ª–æ–≥–∞",
                    RegistrationDate = DateTime.UtcNow
                };

                var result = await userManager.CreateAsync(authorUser, "Author123!");
                if (result.Succeeded)
                {
                    await userManager.AddToRoleAsync(authorUser, Role.Names.Author);
                }
            }

            // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (!context.Tags.Any())
            {
                var tags = new[]
                {
                    new Tag { Name = "–ö–æ—Å–º–æ—Å", Slug = "cosmos", Description = "–°—Ç–∞—Ç—å–∏ –æ –∫–æ—Å–º–æ—Å–µ –∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏", Color = "#1e3a8a" },
                    new Tag { Name = "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", Slug = "tech", Description = "–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", Color = "#059669" },
                    new Tag { Name = "–ù–∞—É–∫–∞", Slug = "science", Description = "–ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", Color = "#dc2626" },
                    new Tag { Name = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", Slug = "programming", Description = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", Color = "#7c3aed" },
                    new Tag { Name = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", Slug = "ai", Description = "–ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", Color = "#ea580c" }
                };

                context.Tags.AddRange(tags);
                await context.SaveChangesAsync();
            }

            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (!context.Articles.Any())
            {
                var tags = await context.Tags.ToListAsync();
                
                var articles = new[]
                {
                    new Article
                    {
                        Title = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SpaceBlog!",
                        Slug = "welcome-to-spaceblog",
                        Summary = "–ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ –Ω–∞—à–µ–º –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –±–ª–æ–≥–µ",
                        Content = "<h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2><p>–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ –Ω–∞—à–µ–º –±–ª–æ–≥–µ –æ –∫–æ—Å–º–æ—Å–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –Ω–∞—É–∫–µ. –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏, –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏.</p>",
                        AuthorId = authorUser!.Id,
                        IsPublished = true,
                        CreatedAt = DateTime.UtcNow.AddDays(-10),
                        ViewCount = 150
                    },
                    new Article
                    {
                        Title = "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ú–∞—Ä—Å–∞: –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã",
                        Slug = "mars-exploration-new-horizons",
                        Summary = "–û–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∫—Ä–∞—Å–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã",
                        Content = "<h2>–ö—Ä–∞—Å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞</h2><p>–ú–∞—Ä—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —É–¥–∏–≤–ª—è—Ç—å —É—á–µ–Ω—ã—Ö —Å–≤–æ–∏–º–∏ —Ç–∞–π–Ω–∞–º–∏. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è...</p>",
                        AuthorId = authorUser!.Id,
                        IsPublished = true,
                        CreatedAt = DateTime.UtcNow.AddDays(-5),
                        ViewCount = 89
                    }
                };

                context.Articles.AddRange(articles);
                await context.SaveChangesAsync();

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∫ —Å—Ç–∞—Ç—å—è–º
                var article1 = articles[0];
                var article2 = articles[1];
                
                context.ArticleTags.AddRange(
                    new ArticleTag { ArticleId = article1.Id, TagId = tags.First(t => t.Slug == "cosmos").Id },
                    new ArticleTag { ArticleId = article1.Id, TagId = tags.First(t => t.Slug == "tech").Id },
                    new ArticleTag { ArticleId = article2.Id, TagId = tags.First(t => t.Slug == "cosmos").Id },
                    new ArticleTag { ArticleId = article2.Id, TagId = tags.First(t => t.Slug == "science").Id }
                );

                await context.SaveChangesAsync();
            }
        }

        private static string GetRoleDescription(string roleName)
        {
            return roleName switch
            {
                Role.Names.Administrator => "–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã",
                Role.Names.Moderator => "–ü—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º",
                Role.Names.Author => "–ü—Ä–∞–≤–∞ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π",
                Role.Names.User => "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                _ => "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–æ–ª—å"
            };
        }

        private static int GetRolePriority(string roleName)
        {
            return roleName switch
            {
                Role.Names.Administrator => 100,
                Role.Names.Moderator => 75,
                Role.Names.Author => 50,
                Role.Names.User => 25,
                _ => 0
            };
        }
    }
}