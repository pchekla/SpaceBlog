@page
@model SpaceBlog.Areas.Identity.Pages.Account.RegisterModel
@{
    ViewData["Title"] = "Регистрация пользователя";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-5 col-md-7 col-sm-9">
            <div class="card shadow-lg border-0">
                <!-- Заголовок с градиентом -->
                <div class="card-header text-center text-white py-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 0.5rem 0.5rem 0 0;">
                    <h2 class="mb-0">
                        <i class="fas fa-user-plus me-2"></i>Регистрация пользователя
                    </h2>
                    <p class="mb-0 mt-2 opacity-75">Создайте новый аккаунт для доступа к блогу</p>
                </div>

                <div class="card-body p-4">
                    <form id="registerForm" method="post">
                        @Html.AntiForgeryToken()
                        
                        <!-- Отображение ошибок -->
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ErrorCount > 0)
                        {
                            <div class="alert alert-danger border-0 shadow-sm mb-4" role="alert">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="fas fa-exclamation-triangle me-2 text-danger"></i>
                                    <strong>Ошибка регистрации</strong>
                                </div>
                                <ul class="mb-0 ps-3">
                                    @foreach (var modelError in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                    {
                                        <li class="text-danger">@modelError.ErrorMessage</li>
                                    }
                                </ul>
                                <hr class="my-2">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Пожалуйста, исправьте указанные ошибки и попробуйте снова
                                </small>
                            </div>
                        }

                        <!-- Имя -->
                        <div class="mb-3">
                            <label for="Input_FirstName" class="form-label">Имя</label>
                            <input name="Input.FirstName" id="Input_FirstName" class="form-control" type="text" value="@Model.Input.FirstName" required />
                            <span asp-validation-for="Input.FirstName" class="text-danger"></span>
                        </div>

                        <!-- Фамилия -->
                        <div class="mb-3">
                            <label for="Input_LastName" class="form-label">Фамилия</label>
                            <input name="Input.LastName" id="Input_LastName" class="form-control" type="text" value="@Model.Input.LastName" required />
                            <span asp-validation-for="Input.LastName" class="text-danger"></span>
                        </div>

                        <!-- Email -->
                        <div class="mb-3">
                            <label for="Input_Email" class="form-label">Email</label>
                            <input name="Input.Email" id="Input_Email" class="form-control" type="email" value="@Model.Input.Email" required />
                            <span asp-validation-for="Input.Email" class="text-danger"></span>
                        </div>

                        <!-- Пароль -->
                        <div class="mb-3">
                            <label for="Input_Password" class="form-label">Пароль</label>
                            <input name="Input.Password" id="Input_Password" class="form-control" type="password" value="@Model.Input.Password" required />
                            <span asp-validation-for="Input.Password" class="text-danger"></span>
                        </div>

                        <!-- Подтверждение пароля -->
                        <div class="mb-3">
                            <label for="Input_ConfirmPassword" class="form-label">Подтвердите пароль</label>
                            <input name="Input.ConfirmPassword" id="Input_ConfirmPassword" class="form-control" type="password" value="@Model.Input.ConfirmPassword" required />
                            <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                        </div>

                        <!-- Кнопка регистрации -->
                        <div class="d-grid mb-3">
                            <button id="registerSubmit" type="submit" class="btn btn-lg text-white" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none;">
                                <i class="fas fa-user-plus me-2"></i>Зарегистрироваться
                            </button>
                        </div>

                        <!-- Ссылка на вход -->
                        <div class="text-center">
                            <p class="text-muted mb-0">
                                Уже есть аккаунт? 
                                <a href="/Identity/Account/Login?returnUrl=@(ViewData["ReturnUrl"] ?? "")" style="color: #667eea; text-decoration: none; font-weight: 600; cursor: pointer;">
                                    Войдите в систему
                                </a>
                            </p>
                        </div>
                    </form>
                </div>

                <!-- Футер карточки -->
                <div class="card-footer bg-light text-center py-3">
                    <small class="text-muted">
                        <i class="fas fa-shield-alt me-1"></i>
                        Ваши данные защищены и используются согласно 
                        <a href="/Privacy" style="color: #667eea; text-decoration: none; cursor: pointer;">политике конфиденциальности</a>
                    </small>
                </div>
            </div>

            <!-- Дополнительная информация -->
            <div class="mt-4 text-center">
                <div class="card border-0 bg-transparent">
                    <div class="card-body">
                        <h6 class="text-muted">Возможности после регистрации:</h6>
                        <div class="row text-center mt-3">
                            <div class="col-4">
                                <i class="fas fa-comments fa-2x text-info mb-2"></i>
                                <p class="small text-muted">Комментирование</p>
                            </div>
                            <div class="col-4">
                                <i class="fas fa-edit fa-2x text-success mb-2"></i>
                                <p class="small text-muted">Создание статей</p>
                            </div>
                            <div class="col-4">
                                <i class="fas fa-user-circle fa-2x text-primary mb-2"></i>
                                <p class="small text-muted">Личный профиль</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Дополнительные стили -->
<style>
    .form-floating > .form-control:focus ~ label,
    .form-floating > .form-control:not(:placeholder-shown) ~ label {
        transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
        color: #667eea !important;
    }
    
    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.15);
    }
    
    .form-control.is-valid {
        border-color: #28a745;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='m2.3 6.73.97.97 4.97-4.97-.97-.97L2.3 5.76z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .form-control.is-invalid {
        border-color: #dc3545;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.5 5.5 1 1m0-1-1 1'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .custom-validation-message {
        animation: fadeIn 0.3s ease-in;
    }
    
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(102, 126, 234, 0.3) !important;
        transition: all 0.3s ease;
    }
    
    .card {
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
    }
    
    @@media (max-width: 576px) {
        .container {
            padding: 0.5rem;
        }
        
        .card-body {
            padding: 2rem 1.5rem;
        }
        
        .card-header h2 {
            font-size: 1.5rem;
        }
    }
</style>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Поля для валидации
            const passwordField = document.getElementById('Input_Password');
            const confirmPasswordField = document.getElementById('Input_ConfirmPassword');
            const form = document.getElementById('registerForm');

            // Создаем контейнеры для сообщений валидации
            function createValidationMessage(input, message, isError = true) {
                // Удаляем существующие сообщения
                const existingMsg = input.parentNode.querySelector('.custom-validation-message');
                if (existingMsg) {
                    existingMsg.remove();
                }

                const msgDiv = document.createElement('div');
                msgDiv.className = `custom-validation-message small mt-1 ${isError ? 'text-danger' : 'text-success'}`;
                msgDiv.innerHTML = `<i class="fas ${isError ? 'fa-exclamation-circle' : 'fa-check-circle'} me-1"></i>${message}`;
                
                input.parentNode.appendChild(msgDiv);
            }

            // Валидация пароля в реальном времени
            if (passwordField) {
                passwordField.addEventListener('input', function() {
                    const password = this.value;
                    
                    if (password.length === 0) {
                        // Удаляем сообщение если поле пустое
                        const existingMsg = this.parentNode.querySelector('.custom-validation-message');
                        if (existingMsg) {
                            existingMsg.remove();
                        }
                        return;
                    }
                    
                    if (password.length < 8) {
                        createValidationMessage(this, 'Пароль должен содержать минимум 8 символов', true);
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                    } else {
                        createValidationMessage(this, 'Пароль соответствует требованиям', false);
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                    
                    // Проверяем совпадение паролей если поле подтверждения заполнено
                    if (confirmPasswordField && confirmPasswordField.value) {
                        validatePasswordMatch();
                    }
                });
            }

            // Валидация совпадения паролей
            function validatePasswordMatch() {
                if (!passwordField || !confirmPasswordField) return;
                
                const password = passwordField.value;
                const confirmPassword = confirmPasswordField.value;
                
                if (confirmPassword.length === 0) {
                    const existingMsg = confirmPasswordField.parentNode.querySelector('.custom-validation-message');
                    if (existingMsg) {
                        existingMsg.remove();
                    }
                    return;
                }
                
                if (password !== confirmPassword) {
                    createValidationMessage(confirmPasswordField, 'Пароли не совпадают', true);
                    confirmPasswordField.classList.add('is-invalid');
                    confirmPasswordField.classList.remove('is-valid');
                } else if (password.length >= 8) {
                    createValidationMessage(confirmPasswordField, 'Пароли совпадают', false);
                    confirmPasswordField.classList.remove('is-invalid');
                    confirmPasswordField.classList.add('is-valid');
                }
            }

            if (confirmPasswordField) {
                confirmPasswordField.addEventListener('input', validatePasswordMatch);
            }

            // Валидация формы при отправке
            if (form) {
                form.addEventListener('submit', function(e) {
                    let isValid = true;
                    
                    // Проверяем пароль
                    if (passwordField && passwordField.value.length < 8) {
                        createValidationMessage(passwordField, 'Пароль должен содержать минимум 8 символов', true);
                        passwordField.classList.add('is-invalid');
                        isValid = false;
                    }
                    
                    // Проверяем совпадение паролей
                    if (passwordField && confirmPasswordField && passwordField.value !== confirmPasswordField.value) {
                        createValidationMessage(confirmPasswordField, 'Пароли не совпадают', true);
                        confirmPasswordField.classList.add('is-invalid');
                        isValid = false;
                    }
                    
                    if (!isValid) {
                        e.preventDefault();
                        
                        // Показываем общее сообщение об ошибке
                        const errorAlert = document.createElement('div');
                        errorAlert.className = 'alert alert-danger border-0 shadow-sm mb-4';
                        errorAlert.innerHTML = `
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-exclamation-triangle me-2 text-danger"></i>
                                <strong>Ошибка валидации</strong>
                            </div>
                            <p class="mb-0">Пожалуйста, исправьте ошибки в форме перед отправкой</p>
                        `;
                        
                        // Удаляем существующие алерты
                        const existingAlert = form.querySelector('.alert-danger');
                        if (existingAlert) {
                            existingAlert.remove();
                        }
                        
                        // Добавляем новый алерт
                        form.insertBefore(errorAlert, form.firstElementChild.nextSibling);
                        
                        // Прокручиваем к началу формы
                        form.scrollIntoView({ behavior: 'smooth' });
                    }
                });
            }

            // Проверяем, что ссылки работают
            const loginLink = document.querySelector('a[href*="Login"]');
            if (loginLink) {
                loginLink.addEventListener('click', function(e) {
                    console.log('Клик по ссылке входа!', e.target.href);
                });
            }
            
            const privacyLink = document.querySelector('a[href*="Privacy"]');
            if (privacyLink) {
                privacyLink.addEventListener('click', function(e) {
                    console.log('Клик по ссылке политики конфиденциальности!', e.target.href);
                });
            }
        });
    </script>
}